<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>All Posts - Enzo 恩佐的數據職涯</title>
        <link>https://enzochang.com/posts/</link>
        <description>All Posts | Enzo 恩佐的數據職涯</description>
        <generator>Hugo -- gohugo.io</generator><language>en</language><managingEditor>enzoapu@gmail.com (Enzo Chang)</managingEditor>
            <webMaster>enzoapu@gmail.com (Enzo Chang)</webMaster><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Sun, 13 Oct 2024 15:48:09 &#43;0800</lastBuildDate><atom:link href="https://enzochang.com/posts/" rel="self" type="application/rss+xml" /><item>
    <title>[Data] 什麼是資料工程(Data Engineering)？為什麼資料工程如此重要？</title>
    <link>https://enzochang.com/data-engineering-introduction/</link>
    <pubDate>Sun, 13 Oct 2024 15:48:09 &#43;0800</pubDate>
    <author>Author</author>
    <guid>https://enzochang.com/data-engineering-introduction/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="/cover-picture-title.png" referrerpolicy="no-referrer">
            </div>前言 在生成式 AI 應用普及化的世代，越來越多人想要踏入 「資料科學」 和 「人工智慧」 領域，其中最吸引人的職位應該是與 AI 工程師或機器學習相關的工作。想像一下，從數據中發掘商業洞見(business insight)，或訓練出一個模型來預測(forecasting)未來——這是一件令人興奮且充滿影響力的事情！😍
但是你有沒有想過，這些數據分析師或資料科學家使用的數據是從哪裡來的？通常這些數據在背後經過了各式的處理和轉換，才能變得乾淨、正確且容易取得，這正是資料工程師(Data Engineer) 的重要工作。
什麼是資料工程？ 資料工程(Data Engineering) 是一個涉及處理和管理大量數據的領域，包括數據的收集、轉換和儲存，將其轉化為有價值的資訊。自 2010 年大數據和雲端運算興起以來，資料工程得到了顯著的發展。分佈式數據處理框架的出現，使得處理大數據變得更容易和高效；同時，雲端平台提供了可擴展和彈性的資源，加速了資料工程的創新和應用。
為什麼資料工程如此重要？ 資料工程在企業界變得越來越熱門，是因為它能夠解決企業在數據處理和管理方面的挑戰，幫助企業更好地利用數據來推動業務增長和服務創新。
為什麼資料工程重要？ 資料工程重要的關鍵原因:
1. 數據量爆炸性增長 在這個數據為王的時代，不論是新興互聯網產業，還是正在推動數位轉型的金融、媒體、製造、醫療等產業，都需要把用戶行為/足跡或生產流程的各種數據保存起來。隨著結構化與非結構化數據量的爆炸性增長，企業需要能夠處理和管理大量數據的技術和專業知識。
2. 數據驅動決策的需求 企業越來越相信數據的價值，希望利用數據來做出更明智的決策。資料工程能夠提供可靠的數據基礎設施和管道，確保數據的正確性和可用性，使企業能夠更有效地分析和利用數據。
3. 支持人工智慧應用發展 機器學習/深度學習需要大量的高質量數據來訓練和驗證模型，並需要分佈式計算框架來實現複雜且大規模的資料處理，最終還得協助模型部署和集成，使模型能夠實際應用於業務場景中。
資料工程的職責範疇 在規模較小的組織中，資料工程的職責通常由其他角色來承擔，例如後端工程師或數據分析師。然而，到了一定規模的組織，就會開始招募資料工程師或成立資料工程團隊，他們的職責範圍大致如下：
資料工程的範疇 1. 數據架構設計 設計適合組織需求的數據架構，包括 ETL/ETL 架構、批量/串流資料管線，資料倉儲結構和存儲方式，具備高可用性與可擴展性。
2. 基礎設施構建與維護 透過雲端服務或開源工具搭建基礎設施，包括資料管線、任務排程器、數據湖、數據倉儲等，提供可靠的數據管理和訪問環境。
3. 數據整合與轉換 整合不同數據源的數據，進行清理、轉換和聚合等操作，使數據具有相同的格式和結構，以支持準確和一致的數據分析。
4. 數據管理與治理 制定數據管理策略和流程，確保數據集中且合規、定義明確、品質穩定、符合隱私規範，包括自動化測試、數據監控、數據目錄、數據驗證、資料安全等。
5. 數據服務化 將數據提供為服務，使其他業務單位可以方便地訪問和使用數據，例如資料儀表板(Dashboard)、資料查詢平台(Query platform)、Data API、機器學習模型、推薦系統等，支持數據驅動的決策與更多應用開發。
總結 資料工程在確保數據的易用性、可靠性和分析準備方面扮演著關鍵角色。在這個數據為王的時代，資料工程師是穩固數據基礎的建築師。不論你是希望支持商業決策、促進機器學習模型、建構 AI 應用，還是進行即時資料分析，資料工程都提供了現代數據驅動企業所需的工具和流程。
想了解更多資料工程相關的知識？想知道如何開始你的資料工程師職涯嗎？
歡迎關注我的 IG 帳號 👉 「Enzo 恩佐的數據職涯」 觀看並取得更多的乾貨和指南，幫助你在學習成長和職涯發展的路上找到方向！
&hellip;
下一篇文章將介紹 「資料工程師」 這個角色的主要工作內容與使命，敬請期待😁]]></description>
</item><item>
    <title>[COURSE] RISE - 設計 E2E 數據架構 學程心得</title>
    <link>https://enzochang.com/e2e-data-architecture-bootcamp/</link>
    <pubDate>Mon, 30 Jan 2023 19:36:23 &#43;0800</pubDate>
    <author>Author</author>
    <guid>https://enzochang.com/e2e-data-architecture-bootcamp/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="/ac-rise.png" referrerpolicy="no-referrer">
            </div>2022年底，我報名了 ALPHA Camp 推出的「設計 E2E 現代數據架構」學程（業界首見👀），六週的內容超出預期的豐富，認識了許多 Data 領域的超強導師和優秀同儕，用力地學習、死命地交流，獲得的知識、經驗、人脈和資源，實在很超值！這篇文章將透過回顧和反思來記錄這些時間的想法與收穫。]]></description>
</item><item>
    <title>[CAREER] 為什麼你應該投稿成為社群/研討會講者？</title>
    <link>https://enzochang.com/why-you-should-be-a-conference-speaker/</link>
    <pubDate>Sun, 10 Apr 2022 19:00:00 &#43;0800</pubDate>
    <author>Author</author>
    <guid>https://enzochang.com/why-you-should-be-a-conference-speaker/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="/conference-speaker.jpg" referrerpolicy="no-referrer">
            </div>最近在和幾位同事討(推)論(坑)要不要投稿今年的 PyCon APAC，發現大家普遍都缺乏動機（不知道為何要投）或是有點畏懼（沒自信能當講者），不過在我看來，投稿和當講者都是一件 C/P 值很高的事！本篇文章將介紹當講者的好處、一些重要的心態，以及任何人都可以展開行動的方法～]]></description>
</item><item>
    <title>[DATA] 訊息佇列 04 - RabbitMQ x Python 程式實作範例</title>
    <link>https://enzochang.com/rabbitmq-python-example/</link>
    <pubDate>Tue, 22 Mar 2022 22:00:00 &#43;0800</pubDate>
    <author>Author</author>
    <guid>https://enzochang.com/rabbitmq-python-example/</guid>
    <description><![CDATA[上一篇文章我們已經把 RabbitMQ Server 的環境架設起來，並在網頁管理介面上體驗建立 Queue 和 Publish / Get 訊息，系列文的最後一篇終於要來寫 code 了，我們將使用 Python 的 Library - Pika 與 RabbitMQ 進行互動，撰寫 Client 端的 Producer 和 Consumer 程式碼。]]></description>
</item><item>
    <title>[DATA] 訊息佇列 03 - RabbitMQ 架設方法與網頁管理介面</title>
    <link>https://enzochang.com/rabbitmq-management-interface/</link>
    <pubDate>Tue, 15 Mar 2022 22:00:00 &#43;0800</pubDate>
    <author>Author</author>
    <guid>https://enzochang.com/rabbitmq-management-interface/</guid>
    <description><![CDATA[上一篇介紹完 RabbitMQ 的架構和設計模式，接下來就要告訴大家如何自己搭建 RabbitMQ Server，不用幾行指令就可以在本機或是虛擬主機把服務架起來，還提供了一個 Web 管理介面方便你瀏覽和操作。]]></description>
</item><item>
    <title>[DATA] 訊息佇列 02 - RabbitMQ 簡介與 5 種設計模式</title>
    <link>https://enzochang.com/rabbitmq-introduction/</link>
    <pubDate>Sun, 06 Mar 2022 21:00:00 &#43;0800</pubDate>
    <author>Author</author>
    <guid>https://enzochang.com/rabbitmq-introduction/</guid>
    <description><![CDATA[上一篇文章介紹完 Message Queue 是什麼後，這次要介紹的是知名且易用的實作工具 RabbitMQ，本篇文章將帶大家認識 RabbitMQ 的架構以及 5 種設計模式。]]></description>
</item><item>
    <title>[DATA] 訊息佇列 01 - Message Queue 介紹與實際應用</title>
    <link>https://enzochang.com/message-queue-introduction/</link>
    <pubDate>Thu, 03 Mar 2022 20:00:00 &#43;0800</pubDate>
    <author>Author</author>
    <guid>https://enzochang.com/message-queue-introduction/</guid>
    <description><![CDATA[這陣子團隊在開發相似商品搜尋的 ML Product，為了要把系統架構解耦，改為異步分散式處理，因而接觸到訊息佇列(Message Queue)，作為兩個子系統（商品資料爬蟲 & 圖片/文字向量轉換）的通信中間層。我將透過四篇文章分享我在使用 RabbitMQ 與 Python 實作的學習。]]></description>
</item><item>
    <title>[DevOps] CI/CD 介紹 - 基礎概念與導入準備</title>
    <link>https://enzochang.com/cicd-introduction/</link>
    <pubDate>Sun, 13 Feb 2022 20:00:00 &#43;0800</pubDate>
    <author>Author</author>
    <guid>https://enzochang.com/cicd-introduction/</guid>
    <description><![CDATA[自從去年初啟動“敏捷”(Scrum)導入，幾乎都在適應(迭代)各種流程、方法和工具，工程實踐方面的單元測試和 CI/CD 推行計畫卻一直往後延。如今，因應團隊一個大型系統要進行前後端分離重構，加上大家對於容器化技術越來越熟悉，同時又有優秀的新夥伴加入，可謂是天時地利人和啊，我們終於要啟動 CI/CD 導入！]]></description>
</item></channel>
</rss>
